trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

strategy:
  matrix:
{% for os, architectures in [('MacOs', ['x64']), ('Ubuntu', ['x64']), ('Windows', ['x86', 'x64'])] %}
{% for minor in range(min_python_version.split(".")[1]|int, (max_python_version.split(".")[1])|int + 1) %}
{% for architecture in architectures %}
    {{os}} CPython3.{{minor}}{{" (%s)" % architecture if architectures|length > 1 else ""}}:
      image: '{{os|lower}}-latest'
      python.version: '3.{{minor}}'
      python.architecture: '{{architecture}}'
{% endfor %}
{% endfor %}
    {{os}} PyPy3:
      image: '{{os|lower}}-latest'
      python.version: 'pypy3'
      python.architecture: '{{architectures[0]}}'
{% endfor %}

pool:
  vmImage: $(image)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'
  - bash: python -m pip install --upgrade pip setuptools
    displayName: 'Install packaging tools'
  - bash: python -m pip install -r requirements.txt
    displayName: 'Install dependencies'
  - bash: python -m pip install --upgrade coverage codecov
    displayName: 'Install coverage dependencies'
  - bash: coverage run -m doctest README.md
    displayName: 'Run doctests'
  - bash: python -m pip install -r requirements-tests.txt
    displayName: 'Install tests dependencies'
  - bash: coverage run --append -m pytest
    displayName: 'Run tests'
  - bash: coverage xml
    displayName: 'Collect coverage'
  - bash: python -m codecov -f coverage.xml -X gcov --build "$AGENT_JOBNAME"
    condition: succeeded()
    displayName: 'Upload coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - ${{{{ if and(eq(variables['python.version'], '3.{{min_python_version.split(".")[1]}}'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}}}:
    - bash: python -m pip install --upgrade wheel
      condition: succeeded()
      displayName: 'Install build dependencies'
    - bash: python setup.py sdist bdist_wheel
      condition: succeeded()
      displayName: 'Build'
    - bash: python -m pip install --upgrade twine
      condition: succeeded()
      displayName: 'Install deploy dependencies'
    - bash: twine upload --skip-existing dist/*
      condition: succeeded()
      displayName: 'Deploy'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(TWINE_PASSWORD)
